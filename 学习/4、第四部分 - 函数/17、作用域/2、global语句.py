#!/usr/bin/env python
# -*- coding:utf-8 -*-

"""
global 语句用于函数内部，作用是将一个变量声明为全局变量
可以直接使用声明的变量，也可以修改声明的变量从而改变变量在全局中的值
"""

# -----------------------------------------------------------------------------
# 示例一、不声明全局变量，但按照 LEGB 法则引用
x = 100


def fun():
    """在 fun() 函数内直接调用变量 x，会按照 LEGB 法则进行索引，在全局作用域内获取 x = 100"""
    y = x + 1
    return y


try:
    print(fun())
except UnboundLocalError as e:
    print('出现错误：', e)
print('x的当前值为：', x)

# -----------------------------------------------------------------------------
# 示例二、不声明全局变量，尝试修改一个全局作用域的变量，出现 UnboundLocalError 错误
x = 100


def fun():
    """
    函数内部的 x = x + 1
    左边的 x 会被直接认定为 fun() 函数内部新定义的变量
    右边的 x 认定为 fun() 函数引用的变量，自动上上层查到，得到全局中的 x = 100变
    量在赋值前，必须要定义，因此 x = x + 1，左边的 x 没有提前定义
    """
    x = x + 1
    return x


try:
    print(fun())
except UnboundLocalError as e:
    print('出现错误：', e)
print('x的当前值为：', x)

# -----------------------------------------------------------------------------
# 示例三、使用 global 语句在函数内部声明全局变量
x = 100


def fun():
    """
    使用 global 语句将 x 声明为全局变量，自动获取全局作用域的变量 x
    在声明的变量修改后，也会将修改后的结果返回给全局作用域
    """
    global x
    x = x + 1
    return x


try:
    print(fun())
except UnboundLocalError as e:
    print('出现错误：', e)
print('x的当前值为：', x)
